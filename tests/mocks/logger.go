// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	port "github.com/jocbarbosa/viswals-backend/internals/core/port"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Alarm provides a mock function with given fields: msg, args
func (_m *Logger) Alarm(msg string, args ...interface{}) {
	// No implementation
}

// Debug provides a mock function with given fields: msg, args
func (_m *Logger) Debug(msg string, args ...interface{}) {
	// No implementation
}

// Error provides a mock function with given fields: msg, args
func (_m *Logger) Error(msg string, args ...interface{}) {
	// No implementation
}

// Info provides a mock function with given fields: msg, args
func (_m *Logger) Info(msg string, args ...interface{}) {
	// No implementation
}

// WithDetails provides a mock function with given fields: detail
func (_m *Logger) WithDetails(detail ...port.Detail) port.Logger {
	// Still return the mock object itself for chaining calls
	return _m
}

// WithError provides a mock function with given fields: err
func (_m *Logger) WithError(err error) port.Logger {
	// Still return the mock object itself for chaining calls
	return _m
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
